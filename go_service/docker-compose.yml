version: "3.7"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: personnel
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: hieunt04lm
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Go Application
  app:
    build: .
    container_name: go-app
    ports:
      - "8080:8080"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: hieunt04lm
      DB_NAME: personnel
      PORT: 8080
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.4
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app-network

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:2.9.4
    container_name: promtail
    volumes:
      - ./logs:/app/logs
      - ./promtail-config.yml:/etc/promtail/promtail-config.yml
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      - loki
    networks:
      - app-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.3.1
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - loki
    networks:
      - app-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090" # Prometheus UI and scraping
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle' # Enable /-/reload endpoint for config changes
    depends_on:
      - app
    networks:
      - app-network

# Define volumes
volumes:
  postgres_data:
  grafana_data:

# Define networks
networks:
  app-network:
    driver: bridge